Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.0.098 Build 20160721

Compiler options: -std=c99 -xCOMMON-avx512 -O2 -D NOFUNCCALL -qopt-report-phase=vec -qopt-report=5 -S -c -fsource-asm -o cadd.S

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at cadd.c(63,5)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference src[i] has unaligned access   [ cadd.c(64,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at cadd.c(63,5)
   remark #15388: vectorization support: reference src[i] has aligned access   [ cadd.c(64,7) ]
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.458
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 18.320 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at cadd.c(63,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference src[i] has unaligned access   [ cadd.c(64,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at cadd.c(68,5)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference dst[i] has unaligned access   [ cadd.c(69,7) ]
   remark #15389: vectorization support: reference src[i] has unaligned access   [ cadd.c(69,20) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.125
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at cadd.c(68,5)
   remark #15388: vectorization support: reference dst[i] has aligned access   [ cadd.c(69,7) ]
   remark #15389: vectorization support: reference src[i] has unaligned access   [ cadd.c(69,20) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.591
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 0.340 
   remark #15478: estimated potential speedup: 19.740 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at cadd.c(68,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference dst[i] has unaligned access   [ cadd.c(69,7) ]
   remark #15389: vectorization support: reference src[i] has unaligned access   [ cadd.c(69,20) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.125
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at cadd.c(74,5)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference dst[i] has unaligned access   [ cadd.c(77,8) ]
   remark #15389: vectorization support: reference dst[i] has unaligned access   [ cadd.c(77,13) ]
   remark #15389: vectorization support: reference dst[i] has unaligned access   [ cadd.c(77,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at cadd.c(74,5)
   remark #15388: vectorization support: reference dst[i] has aligned access   [ cadd.c(77,8) ]
   remark #15388: vectorization support: reference dst[i] has aligned access   [ cadd.c(77,13) ]
   remark #15388: vectorization support: reference dst[i] has aligned access   [ cadd.c(77,18) ]
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 18.830 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at cadd.c(74,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference dst[i] has unaligned access   [ cadd.c(77,8) ]
   remark #15389: vectorization support: reference dst[i] has unaligned access   [ cadd.c(77,13) ]
   remark #15389: vectorization support: reference dst[i] has unaligned access   [ cadd.c(77,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END
===========================================================================

Begin optimization report for: SearchingIndex16(int, int *, long *, int, long *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at cadd.c(21,3)
   remark #15388: vectorization support: reference lineIndex[j] has aligned access   [ cadd.c(22,5) ]
   remark #15305: vectorization support: vector length 16
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.000 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at cadd.c(24,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cadd.c(29,5)
      remark #15388: vectorization support: reference quot[j] has aligned access   [ cadd.c(30,7) ]
      remark #15388: vectorization support: reference lineIndex[j] has aligned access   [ cadd.c(30,17) ]
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.010
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 25 
      remark #15477: vector cost: 6.560 
      remark #15478: estimated potential speedup: 3.770 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cadd.c(33,5)
      remark #15388: vectorization support: reference rem[j] has aligned access   [ cadd.c(34,7) ]
      remark #15388: vectorization support: reference lineIndex[j] has aligned access   [ cadd.c(34,16) ]
      remark #15388: vectorization support: reference quot[j] has aligned access   [ cadd.c(34,29) ]
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.143
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 16.000 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cadd.c(38,5)
      remark #15388: vectorization support: reference lineIndex[j] has aligned access   [ cadd.c(39,7) ]
      remark #15388: vectorization support: reference quot[j] has aligned access   [ cadd.c(39,23) ]
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.180 
      remark #15478: estimated potential speedup: 21.330 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cadd.c(42,5)
      remark #15389: vectorization support: reference offset[j] has unaligned access   [ cadd.c(43,7) ]
      remark #15389: vectorization support: reference offset[j] has unaligned access   [ cadd.c(43,7) ]
      remark #15388: vectorization support: reference rem[j] has aligned access   [ cadd.c(43,20) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.700
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 7.520 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Sigmoid(float *__restrict__, float *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at cadd.c(52,3)
   remark #15389: vectorization support: reference x[j] has unaligned access   [ cadd.c(53,31) ]
   remark #15389: vectorization support: reference y[j] has unaligned access   [ cadd.c(53,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.061
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 136 
   remark #15477: vector cost: 7.180 
   remark #15478: estimated potential speedup: 17.830 
   remark #15482: vectorized math library calls: 1 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================
